name: 'C++ CI'

on:
  push:
    branches:
      - lab5
      - feature/github_actions
  release:
    types: [published]
jobs:
  build_on_Ubuntu:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Устанавливаем зависимости, включая SFML
      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y build-essential cmake libsfml-dev

      # Строим проект
      - name: Build Project
        run: |
            rm -rf build
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release

      # Запускаем тесты (если есть тесты, добавьте этот шаг)
      - name: Run Tests
        run: |
            cd build
            ctest -V # Добавлен -V для verbose output
        # Проверьте опции и настройки в CMakeLists.txt

      # Строим проект с конфигурацией Debug
      - name: Build Debug
        run: |
          rm -rf build
          mkdir build
          cd build
          cmake .. -DPATCH_VERSION=${{ github.run_number }} -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --config Debug
          cmake --build . --target package --config Debug

      # Создаем релиз на GitHub
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}-Linux5
          release_name: Release ${{ github.run_number }} for linux
          draft: false
          prerelease: false

      # Загружаем релизный ассет (DEB-пакет для релизной сборки)
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: ./build/physics-0.0.${{ github.run_number }}-Linux.deb
          asset_name: physics-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  build_macos:
    runs-on: macos-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

  # Устанавливаем SFML с помощью Homebrew
      - run: |
          brew update
          brew install sfml
          brew info sfml

  # Конфигурируем проект с помощью CMake, используя номер запуска для PATCH_VERSION 
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}  
      
  # Строим проект с помощью CMake
      - run: cmake --build . --config Release
      
  # Запускаем тесты (если они есть, если нет, можно удалить этот шаг)
      - run: cmake --build . --target test
  
  # Создаем пакет
      - run: cmake --build . --target package

  # Создаем релиз для MacOS
      - name: Create Release
        id: create_release_macos
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}-mac # Используем номер запуска для тега
          release_name: Release ${{ github.run_number }} for macOS
          draft: false # Не публикуем релиз в черновике
          prerelease: false # Не публикуем как предварительную версию

  # Загружаем релизный ассет для MacOS
      - name: Upload Release Asset (MacOS)
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_macos.outputs.upload_url }}
          asset_path: ./physics-0.0.${{ github.run_number }}-Darwin.zip
          asset_name: physics-0.0.${{ github.run_number }}-Darwin.zip
          asset_content_type: application/zip